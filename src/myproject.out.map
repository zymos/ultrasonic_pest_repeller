Archive member included to satisfy reference by file (symbol)

/usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_divmodhi4.o)
                              main.o (__divmodhi4)
/usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/crtattiny26.o (exit)
/usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_udivmodhi4.o)
                              /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_divmodhi4.o) (__udivmodhi4)

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000000800 xr
data             0x0000000000800060 0x0000000000000080 rw !x
eeprom           0x0000000000810000 0x0000000000000080 rw !x
fuse             0x0000000000820000 0x0000000000000002 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
user_signatures  0x0000000000850000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/crtattiny26.o
LOAD /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/libm.a
LOAD main.o
START GROUP
LOAD /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a
LOAD /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/libm.a
LOAD /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/libc.a
LOAD /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/libattiny26.a
END GROUP
                0x0000000000000000                __TEXT_REGION_ORIGIN__ = DEFINED (__TEXT_REGION_ORIGIN__)?__TEXT_REGION_ORIGIN__:0x0
                [0x0000000000800060]                __DATA_REGION_ORIGIN__ = DEFINED (__DATA_REGION_ORIGIN__)?__DATA_REGION_ORIGIN__:0x800060
                [0x0000000000000800]                __TEXT_REGION_LENGTH__ = DEFINED (__TEXT_REGION_LENGTH__)?__TEXT_REGION_LENGTH__:0x2000
                [0x0000000000000080]                __DATA_REGION_LENGTH__ = DEFINED (__DATA_REGION_LENGTH__)?__DATA_REGION_LENGTH__:0xffa0
                [0x0000000000000080]                __EEPROM_REGION_LENGTH__ = DEFINED (__EEPROM_REGION_LENGTH__)?__EEPROM_REGION_LENGTH__:0x10000
                [0x0000000000000002]                __FUSE_REGION_LENGTH__ = DEFINED (__FUSE_REGION_LENGTH__)?__FUSE_REGION_LENGTH__:0x400
                0x0000000000000400                __LOCK_REGION_LENGTH__ = DEFINED (__LOCK_REGION_LENGTH__)?__LOCK_REGION_LENGTH__:0x400
                0x0000000000000400                __SIGNATURE_REGION_LENGTH__ = DEFINED (__SIGNATURE_REGION_LENGTH__)?__SIGNATURE_REGION_LENGTH__:0x400
                0x0000000000000400                __USER_SIGNATURE_REGION_LENGTH__ = DEFINED (__USER_SIGNATURE_REGION_LENGTH__)?__USER_SIGNATURE_REGION_LENGTH__:0x400

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x1c8
 *(.vectors)
 .vectors       0x0000000000000000       0x18 /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/crtattiny26.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
                0x0000000000000018                . = ALIGN (0x2)
                0x0000000000000018                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000018        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000018                __trampolines_end = .
 *libprintf_flt.a:*(.progmem.data)
 *libc.a:*(.progmem.data)
 *(.progmem*)
                0x0000000000000018                . = ALIGN (0x2)
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000018                __ctors_start = .
 *(.ctors)
                0x0000000000000018                __ctors_end = .
                0x0000000000000018                __dtors_start = .
 *(.dtors)
                0x0000000000000018                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000018        0x0 /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/crtattiny26.o
                0x0000000000000018                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000018        0x8 /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/crtattiny26.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000020       0x18 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_copy_data.o)
                0x0000000000000020                __do_copy_data
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0000000000000038        0x4 /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/crtattiny26.o
 *(.init9)
 *(.text)
 .text          0x000000000000003c        0x2 /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/crtattiny26.o
                0x000000000000003c                __bad_interrupt
                0x000000000000003c                __vector_6
                0x000000000000003c                __vector_3
                0x000000000000003c                __vector_11
                0x000000000000003c                __vector_7
                0x000000000000003c                __vector_5
                0x000000000000003c                __vector_4
                0x000000000000003c                __vector_9
                0x000000000000003c                __vector_2
                0x000000000000003c                __vector_8
                0x000000000000003c                __vector_10
 .text          0x000000000000003e      0x128 main.o
                0x000000000000003e                animal_det
                0x0000000000000104                __vector_1
                0x000000000000014a                initialize
 .text          0x0000000000000166        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_divmodhi4.o)
 .text          0x0000000000000166        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_exit.o)
 .text          0x0000000000000166        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_copy_data.o)
 .text          0x0000000000000166        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_udivmodhi4.o)
                0x0000000000000166                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x0000000000000166        0xc main.o
                0x0000000000000166                main
 .text.libgcc.mul
                0x0000000000000172        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_divmodhi4.o)
 .text.libgcc.div
                0x0000000000000172       0x26 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_divmodhi4.o)
                0x0000000000000172                __divmodhi4
                0x0000000000000172                _div
 .text.libgcc   0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_divmodhi4.o)
 .text.libgcc.prologue
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_divmodhi4.o)
 .text.libgcc.builtins
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_divmodhi4.o)
 .text.libgcc.fmul
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_divmodhi4.o)
 .text.libgcc.fixed
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_divmodhi4.o)
 .text.libgcc.mul
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_exit.o)
 .text.libgcc.div
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_exit.o)
 .text.libgcc.fixed
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_copy_data.o)
 .text.libgcc.div
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_copy_data.o)
 .text.libgcc   0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_copy_data.o)
 .text.libgcc.prologue
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_copy_data.o)
 .text.libgcc.builtins
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_copy_data.o)
 .text.libgcc.fmul
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_copy_data.o)
 .text.libgcc.fixed
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_copy_data.o)
 .text.libgcc.mul
                0x0000000000000198        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_udivmodhi4.o)
 .text.libgcc.div
                0x0000000000000198       0x2c /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_udivmodhi4.o)
                0x0000000000000198                __udivmodhi4
 .text.libgcc   0x00000000000001c4        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_udivmodhi4.o)
 .text.libgcc.prologue
                0x00000000000001c4        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_udivmodhi4.o)
 .text.libgcc.builtins
                0x00000000000001c4        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_udivmodhi4.o)
 .text.libgcc.fmul
                0x00000000000001c4        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_udivmodhi4.o)
 .text.libgcc.fixed
                0x00000000000001c4        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_udivmodhi4.o)
                0x00000000000001c4                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000000000001c4        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_exit.o)
                0x00000000000001c4                exit
                0x00000000000001c4                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00000000000001c4        0x4 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_exit.o)
 *(.fini0)
                0x00000000000001c8                _etext = .

.data           0x0000000000800060       0x14 load address 0x00000000000001c8
                0x0000000000800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/crtattiny26.o
 .data          0x0000000000800060        0x0 main.o
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_divmodhi4.o)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_exit.o)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_copy_data.o)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_udivmodhi4.o)
 *(.data*)
 *(.gnu.linkonce.d*)
 *(.rodata)
 .rodata        0x0000000000800060       0x14 main.o
                0x0000000000800060                beep_length
 *(.rodata*)
 *(.gnu.linkonce.r*)
                0x0000000000800074                . = ALIGN (0x2)
                0x0000000000800074                _edata = .
                0x0000000000800074                PROVIDE (__data_end, .)

.bss            0x0000000000800074        0x0
                [!provide]                        PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800074        0x0 /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/crtattiny26.o
 .bss           0x0000000000800074        0x0 main.o
 .bss           0x0000000000800074        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_divmodhi4.o)
 .bss           0x0000000000800074        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_exit.o)
 .bss           0x0000000000800074        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_copy_data.o)
 .bss           0x0000000000800074        0x0 /usr/lib/gcc/avr/5.4.0/tiny-stack/libgcc.a(_udivmodhi4.o)
 *(.bss*)
 *(COMMON)
                [!provide]                        PROVIDE (__bss_end, .)
                0x00000000000001c8                __data_load_start = LOADADDR (.data)
                0x00000000000001dc                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800074        0x0
                [!provide]                        PROVIDE (__noinit_start, .)
 *(.noinit*)
                [!provide]                        PROVIDE (__noinit_end, .)
                0x0000000000800074                _end = .
                [!provide]                        PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.user_signatures
 *(.user_signatures*)

.stab           0x0000000000000000      0x870
 *(.stab)
 .stab          0x0000000000000000      0x870 main.o

.stabstr        0x0000000000000000      0xd69
 *(.stabstr)
 .stabstr       0x0000000000000000      0xd69 main.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 main.o
                                         0x12 (size before relaxing)

.note.gnu.avr.deviceinfo
                0x0000000000000000       0x3c
 .note.gnu.avr.deviceinfo
                0x0000000000000000       0x3c /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/crtattiny26.o

.note.gnu.build-id
 *(.note.gnu.build-id)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info     0x0000000000000000      0x2dc
 *(.debug_info .gnu.linkonce.wi.*)
 .debug_info    0x0000000000000000      0x2dc /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/crtattiny26.o

.debug_abbrev   0x0000000000000000      0x2b6
 *(.debug_abbrev)
 .debug_abbrev  0x0000000000000000      0x2b6 /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/crtattiny26.o

.debug_line     0x0000000000000000       0x1a
 *(.debug_line .debug_line.* .debug_line_end)
 .debug_line    0x0000000000000000       0x1a /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/crtattiny26.o

.debug_frame
 *(.debug_frame)

.debug_str      0x0000000000000000       0xfa
 *(.debug_str)
 .debug_str     0x0000000000000000       0xfa /usr/lib/gcc/avr/5.4.0/../../../avr/lib/tiny-stack/crtattiny26.o

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_weaknames
 *(.debug_weaknames)

.debug_funcnames
 *(.debug_funcnames)

.debug_typenames
 *(.debug_typenames)

.debug_varnames
 *(.debug_varnames)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges
 *(.debug_ranges)

.debug_macro
 *(.debug_macro)
OUTPUT(myproject.out elf32-avr)
LOAD linker stubs
